#!/usr/bin/env ruby
# tt - a 9term-compatible terminal in Ruby/Tk.

require 'tk'
require 'pty'

Thread.abort_on_exception = true

case RUBY_PLATFORM
when /linux/
  TIOCSWINSZ = 0x5414
else
  TIOCSWINSZ = nil
end

DEFAULT_FONT = '-misc-fixed-bold-r-normal--15-140-75-75-c-90-iso8859-1'  # 9x15bold
ALTERNATE_FONT = '-b&h-lucida-medium-r-normal-*-12-120-75-75-p-71-iso10646-1'

class TT
  def initialize(opts={})
    @opts = opts

    @root = TkRoot.new {
      title "tt"
      geometry(opts["geom"])  if opts["geom"]
    }

    if @opts["sb"]
      @yscroll = TkScrollbar.new(@root) {
        pack 'side' => 'left', 'fill' => 'y'
      }
    end

    @scroll = TkVariable.new
    @scroll.value = opts["sc"]
    @mono = TkVariable.new
    @mono.value = opts["fw"]

    # XXX provide text via socket?
    @text = TkText.new(@root) {
      yscrollbar @yscroll  if opts["sb"]
      height opts["height"]
      width opts["width"]
      tabstyle 'wordprocessor'
      pack 'fill' => 'both', 'expand' => 'yes'
    }
    font_cmd

    @text.bind("KeyPress") { |o|
      case o.keysym
      when "Next", "Prior", "Up", "Down", "Left", "Right"
        # XXX good idea left/right?
        # PASSTHRU, no callback_break!
      when "Home"
        @text.yview_moveto 0
        @text.mark_set('insert', '1.0')
        Tk.callback_break
      when "End"
        @text.yview_moveto 1
        @text.mark_set('insert', 'end')
        Tk.callback_break
      else
        
        if @text.index('end') == @text.index('insert + 1 chars')
          @output.write o.char
          @text.see('end')
          Tk.callback_break
        elsif o.char == ?\C-w
          # XXX skip whitespace first
          @text.delete('insert - 1c wordstart', 'insert')
        elsif o.char == ?\C-u
          @text.delete('insert linestart', 'insert')
        else
          # PASSTHRU, no callback_break!
        end
      end
      
    }

    @text.bind("Button-2", method(:paste_callback))

    menu = TkMenu.new(@root) { tearoff false }
    
    menu.add_command :label => "fwd", :command => method(:fwd_cmd)
    menu.add_command :label => "bwd", :command => method(:bwd_cmd)
    menu.add_command :label => "cut", :command => method(:cut_cmd)
    menu.add_command :label => "paste", :command => method(:paste_cmd)
    menu.add_command :label => "send", :command => method(:send_cmd)
    menu.add_command :label => "clear", :command => method(:clear_cmd)
    menu.add_checkbutton :label => "mono", :variable => @mono, :command => method(:font_cmd)
    menu.add_checkbutton :label => "scroll", :variable => @scroll
    @lastcmd = 0

    # hacky
    menufontheight = TkFont.metrics("TkMenuFont", "linespace")+5
    @root.bind '3', lambda { |x, y|
      menu.popup(x-10,y-10-@lastcmd*menufontheight)
    }, "%X %Y"

    if TIOCSWINSZ
      pw = ph = 0
      @root.bind('Configure') { |o|
        # XXX slow down
        if @pid
          unless pw == o.width && ph == o.height
            pw = o.width
            ph = o.height
            w = @text.winfo_width / @font_width
            h = @text.winfo_height / @font_height
            @output.ioctl(TIOCSWINSZ, [h, w, ph, pw].pack('SSSS'))
          end
        end
      }
    end

    @text.focus
  end

  def paste_callback(event)
    sel = TkSelection.get(:type => "UTF8_STRING")  rescue ""
    @text.mark_set('insert', 'end')
    @output.write sel
    @text.mark_set('insert', 'end')
    Tk.callback_break
  end

  attr_reader :font
  def font=(font)
    @text.font = font
    @font = font
    @font_height = TkFont.metrics(font, "linespace")
    @font_width = TkFont.measure(font, "0")
  end

  # hack
  def fix_utf8(buf)
    buf.force_encoding("UTF-8")
    buf.encode!("UTF-16", :invalid => :replace, :undef => :replace)
    buf.encode!("UTF-8")
    buf
  end

  def run(command=nil)
    command ||= @opts["cmd"]
    ENV["TERM"] = @opts["term"]
    @input, @output, @pid = PTY.spawn(*command)

    Thread.new {
      begin
        while buf = @input.readpartial(4096)
          buf = fix_utf8(buf).delete("\r")
          
          # XXX handle \r properly, clear to beginning of line? (also for C-u)
          out = ""
          buf.each_char { |char|
            if char == "\b"
              if out.empty?
                @text.delete('end - 2 chars')
              else
                out.chop!
              end
            else
              out << char
            end
          }
          
          out.gsub!(/\033\];(.*?)\007/) { 
            @root.title = $1
            ""
          }
          
          @text.insert 'end', out
          
          if @scroll.value == "1"
            @text.yview_moveto 1
          end
        end
      rescue Errno::EIO
        # XXX too late now anyway?
        exit
      end
    }
  end

  def fwd_cmd
    @lastcmd = 0
    sel = @text.get('sel.first', 'sel.last')  rescue return
    if match = @text.tksearch(sel, 'sel.last', 'end')
      @text.tag_remove 'sel', 'sel.first', 'sel.last'
      @text.tag_add 'sel', match, "#{match} + #{sel.size} chars"
      @text.mark_set('insert', 'sel.first')
    end
  end

  def bwd_cmd
    @lastcmd = 1
    sel = @text.get('sel.first', 'sel.last')  rescue return
    if match = @text.tksearch(['backwards'], sel, 'sel.first', '1.0')
      @text.tag_remove 'sel', 'sel.first', 'sel.last'
      @text.tag_add 'sel', match, "#{match} + #{sel.size} chars"
      @text.mark_set('insert', 'sel.first')
    end
  end

  def cut_cmd
    @lastcmd = 2
    sel = @text.get('sel.first', 'sel.last')  rescue return
    @text.delete('sel.first', 'sel.last')
    # XXX hack
    IO.popen("xsel -i", "w") { |xsel| xsel << sel }
  end

  def paste_cmd
    @lastcmd = 3
    sel = TkSelection.get(:type => "UTF8_STRING")  rescue ""
    @text.insert('insert', sel)
  end

  def send_cmd
    @lastcmd = 4
    sel = @text.get('sel.first', 'sel.last')  rescue return
    sel << "\n"  unless sel[-1] == "\n"
    @text.mark_set('insert', 'end')
    @output.write sel
    @text.mark_set('insert', 'end')
  end

  def clear_cmd
    @lastcmd = 5
    @text.delete('1.0', 'end')
  end

  def font_cmd
    if @mono.value == "1"
      self.font = @opts["fn"]
    else
      self.font = @opts["af"]
    end
  end
end

opts = {
  "sb" => true,
  "fw" => true,
  "sc" => true,
  "fn" => DEFAULT_FONT,
  "af" => ALTERNATE_FONT,
  "width" => "80",
  "height" => "24",
  "term" => "9term",
  "cmd" => [ENV["SHELL"] || "/bin/sh"],
}
until ARGV.empty?
  case arg = ARGV.shift
  when /\A([+-])(sb|sc|fw)\z/
    opts[$2] = ($1 == "-")
  when /\A-(fn|af|term)\z/
    opts[$1] = ARGV.shift
  when /\A-(g(eometry)?)\z/
    g = ARGV.shift
    if g =~ /\A(\d+x\d+)?([+-]\d+[+-]\d+)?\z/
      opts["width"], opts["height"] = $1.split("x")  if $1
      opts["geom"] = $2
    else
      abort "invalid geometry #{g}"
    end
  when "-e"
    opts["cmd"] = ARGV
    break
  else
    abort "invalid argument #{arg}"
  end
end

t = TT.new(opts)
t.run
Tk.mainloop
